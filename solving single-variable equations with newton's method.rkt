#lang sicp
(define dx 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? a b)
    (< (abs (- a b)) dx))
  (define (try guess)
    (let ((next (f guess)))
      (if(close-enough? guess next)
         next
         (try next)
       )
     )
  )
  (try first-guess)
)  
(define (dr f)
  (lambda(x)
    (/ (- (f(+ x dx)) (f x)) dx)
  )
)
(define (newton-ver f)
  (lambda(x)
    (- x(/ (f x) ((dr f) x)))
  )
)
(define (newton f guess)
  (fixed-point (newton-ver f) guess)
)
(define (cube x) (* x x x))
(define (square x) (* x x))
(define (cubic a b c d)
  ( lambda(x)
     (+ (* a (cube x)) (* b (square x)) (* c x) d)
  )
)
(define (squared a b c)
  ( lambda(x)
     (+ (* a (square x)) (* b x) c)
  )
)  
   