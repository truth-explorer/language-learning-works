#lang sicp
(define (double p)
  (lambda(x)
    (p(p x))
   )
)  
(define (compose f g)
  (lambda(x)
    (f(g x))
  )
)
(define (repeated f n)
    (define (iter i result)
        (if (= i 1)
            result
            (iter (- i 1)
                  (compose f result)
            )
        )
     )
    (iter n f)
)
(define dx 0.00001)
(define (smooth f)
  (lambda(x)
    (/ (+(f (- x dx)) (f x) (f(+ x dx))) 3)
  )
)
(define (n-smoothed f n)
  ((repeated smooth n)f)
)
(define (iterative-improve close-enough? improve)
    (lambda (first-guess)
        (define (try guess)
            (let ((next (improve guess)))
                (if (close-enough? guess next)
                    next
                    (try next))))
        (try first-guess)))
