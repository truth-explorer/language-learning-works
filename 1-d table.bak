#lang sicp
(define (lookup key table)
  (let((record (assoc key (cdr table))))
      (if record
          (cdr record)
          false
      )
  )
)
(define (assoc key records)
  (cond((null? records) false)
       ((equal? key (caar records)) (car records))
       (else (assoc key (cdr records)))
  )
)
(define (equal? x y)
    (cond ((and (symbol? x) (symbol? y))
            (eq? x y))
          ((and (list? x) (list? y))
            (list-equal? x y))
          (else
            (error "Wrong type input x and y -- EQUAL?" x y))))
(define (list-equal? x y)
  (cond ((and (null? x) (null? y))  #t)                             ; 空表
        ((or (null? x) (null? y))   #f)                              ; 长度不同的表
        ((equal? (car x) (car y)) (equal? (cdr x) (cdr y)))
        (else #f)
   )
)
(define (insert key value table)
  (if (assoc key (cdr table))
      (set-cdr! record value)
      (set-cdr! table (cons (cons key value) (cdr table)))
  )
)
(define (make-empty-table) (list 'table))
