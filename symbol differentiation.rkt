#lang sicp
(define (=number? exp num)
    (and (number? exp) (= exp num) )
)
(define (same-variable? a b)
    (and (symbol? a) (symbol? b) (eq? a b))
)
(define (make-sum a1 a2)
    (cond ((=number? a1 0)
            a2)
          ((=number? a2 0)
            a1)
          ((and (number? a1) (number? a2))
            (+ a1 a2))
          (else
            (list '+ a1 a2))))

(define (sum? x)
    (and (pair? x) (eq? (car x) '+))
)
(define addend cadr)
(define augend caddr)
(define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0))    0)
          ((=number? m1 1)                        m2)
          ((=number? m2 1)                        m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else                      (list '* m1 m2))
     )
)
(define (product? x)
    (and (pair? x) (eq? (car x) '*))
)
(define multiplier cadr)
(define multiplicand caddr)
(define (make-expo base exponent)
  (cond ((= exponent 0) 1)
        ((= exponent 1) base)
        (else (list '^ base exponent))
  )
)
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '^))
)
(define base cadr)
(define exponent caddr)
(define (deriv exp var)
    (cond ((number? exp) 0)
          ((symbol? exp)
            (if (same-variable? exp var)
                1
                0)
           )
          ((sum? exp)
            (make-sum (deriv (addend exp) var)
                      (deriv (augend exp) var))
           )
          ((product? exp)
            (make-sum
                (make-product (multiplier exp)
                              (deriv (multiplicand exp) var))
                (make-product (deriv (multiplier exp) var)
                              (multiplicand exp))
            )
          )
          ((exponentiation? exp)
           (make-product (exponent exp)
                        (make-product (make-expo (base exp) (- (exponent exp) 1)) (deriv (base exp) var))
           )
          )
          (else (error "unknown expression type -- DERIV" exp))
      )
)  
         
           

