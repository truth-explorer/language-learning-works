#lang sicp
(define (filtered-accumulate combine null-value a b valid?)
    (define (iter i result)
      (cond ((> i b)     result)
            ((valid? i b) (iter (+ i 1) (combine i result)))
            (else       (iter (+ i 1) result))
      )
     )
    (iter a null-value)
)
(define (gcd a b)
  (if (= b 0) a
      (gcd b (remainder a b))
   )
)
(define (coprime? i n)
  (and (< i n)
       (= 1 (gcd i n))
  )
)
(define (prime-product n)
  (filtered-accumulate * 1 1 n coprime?)
)