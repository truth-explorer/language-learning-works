#lang sicp
(define (newmap trans item)
  (if (null? item)
      nil
      (cons (trans (car item)) (newmap trans (cdr item))
      )
   )
)
(define (multiply-list lst factor)
  ( map (lambda (x)
          (* x factor)
        ) lst
   )
)
(define (multiply-tree tree factor)
  (map (lambda(sub-tree)
         (if (pair? sub-tree)
             (multiply-tree sub-tree factor)
             (* sub-tree factor)
          )
       ) tree)
)
(define (square x) (* x x))
(define (square-tree tree)

  (map (lambda (sub-tree)
             (if (pair? sub-tree)          
                 (square-tree sub-tree)  
                 (square sub-tree)
              )
        )tree)
)
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))
   )
)
(define fold-right accumulate)
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest)) (cdr rest))
    )
   )
  (iter initial sequence)
)  