#lang sicp
(define (list-int low high)
  (if (> low high)
      nil
      (cons low (list-int (+ 1 low) high))
   )
)  
(define (newmap trans item)
  (if (null? item)
      nil
      (cons (trans (car item)) (newmap trans (cdr item))
      )
   )
)
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))
   )
)
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence) (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))
   )
)  
(define (flatmap proc sequence)
  (accumulate append nil (newmap proc sequence))
)
(define (remove a b)
  (filter (lambda(x)
            (not (= x a))
          ) b
  )
)  
(define (permutation s)
  (if (null? s)
      (list nil)
      (flatmap (lambda(x)
                 (newmap (lambda(y)
                           (cons x y)
                          )
                  (permutation (remove x s))
                  )
                ) s
       )
   )
)
(define (list-triple filtered)
  (list (car filtered) (cadr filtered) (caddr filtered))
)
(define (equal? s triple)
  (= s (+ (car triple) (cadr triple) (caddr triple)))
)  
(define (sum-triple s n)
  (newmap list-triple 
   (filter (lambda(t)
             (equal? s t)
            )
           (flatmap (lambda(i)
                      (flatmap (lambda(j)
                                (newmap (lambda (k)
                                          (list i j k)
                                         ) (list-int 1 (- j 1))
                                )
                               ) (list-int 1 (- i 1))
                      )
                     ) (list-int 1 n)
           )
    )      
   )
)  





